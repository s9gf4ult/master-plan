root issues ;

issues {
  description "Make more usable tool"
} internals -> (bugs * usability) ;

bugs wrongTrust * multipleYamlProjs ;

multipleYamlProjs {
  description "There is multiple keys allowed in yaml parser. This behaviour must be restricted"
} ;

wrongTrust {
  description "Trust is calculated wrong for this formula: '(a + b) * (a * b)'. Simplifier must can see, that trust must be just as for '(a * b)' but it does not. Potentially can be solved as the trust of sequential execution of precalculated plan"
} (taskList -> trustOfPlan) + (datatypes -> trustByAlgebra) ;

trustOfPlan {
  description "Calculate trust by calculating the trust of whole plan execution for each subproject"
  trust 80%
} ;

trustByAlgebra {
  description "Calculate trust by reducing algebraic expressions to minimal formula"
  trust 40%
} ;

internals {
  description "Improve internals of the project"
} parser * (datatypes -> (simplification * weightedSeq)) ;

parser {
  description "Make clean extendable parser"
} yaml + inhouseParser ;

yaml {
  description "Replace parser with yaml"
  trust 80%
};

inhouseParser {
  description "Simplify inhouse parser, remove business logic from parser"
  trust 50%
};

datatypes {
  description "Separate algebra from projects. Get rid of 'Annotated' constructor (and lots of 'undefined'). And stuff"
  trust 75%
};

simplification {
  description "Improve simplification: simplify not just expressions but whole project. May be unusable."
  trust 45%
};

weightedSeq {
  description "Generalize product and sequence to weighted sequence, where '[0]->' is just a synonym to '*' and '[1]->' is just a synonym to '->'. Useful when you are not sure if some subproject realy hard depends from another (they may be kind of possibly independent)."
  trust 90%
};

usability input * output * processing ;

input pluggableInputs;

pluggableInputs {
  description "Parsing org files as well as yaml would be just awesome."
} ;

output pluggableRenderers * taskList ;

pluggableRenderers {
  description "Render graph to picture, html page (with dynamic folding), and other outputs."
} ;

taskList {
  description "Print list of tasks which may be executed (not depend from any other task) selected and sorted by arbitrary condition"
} ;

processing nesting * multipleRating * defaultRatings * allowCycles * removeDeadPlanCode * resourceManagement * (scheduling -> googleCalendarIntegration) * orgModeIntegration ;

nesting modules * localVariables ;

modules {
  description "Make Haskell-like module system to import project trees one from another and use some subprojects as dependencies"
  trust 80%
} ;

localVariables {
  description "Allow local variables used inside of formula (not visible from other projects). Just for convenience of writing of complex nested projects"
  trust 70%
} ;

defaultRatings {
  description "Get from parameters default values (if not presented in project properties) for trust, cost and more"
} ;

multipleRating {
  description "Multiple numbers for such things like 'trust' and 'price'. Result must be some kind of stats (min, max, avg)"
  trust 80%
} ;

allowCycles {
  description "Allow cycles between projects"
} weightedSeq -> flexibleTasksList ;

flexibleTasksList {
  description "Calculate tasks list as some kind of weighted graph decomposition on the line"
  trust 15%
} ;

scheduling taskScheduling -> (stablePlans * cycledTasks) ;

taskScheduling {
  description "Add parameter 'schedule' and consider it on plan generation"
  trust 75%
} ;

stablePlans {
  description "Solve the potential problem of instable plans which change too fast when project tree changes slightly"
  trust 10%
} ;

removeDeadPlanCode {
  description "Solve the problem of removing the dead projects (executed) from initial files"
  trust 80%
} ;
